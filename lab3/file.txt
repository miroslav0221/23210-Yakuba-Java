//package org.example.View;
//import org.example.Model.Cell;
//import org.example.Model.Figure;
//import org.example.Model.Model;
//import org.example.Model.MyField;
//
//import javax.swing.*;
//import javax.swing.table.DefaultTableModel;
//import java.awt.*;
//import java.awt.event.KeyEvent;
//import java.awt.event.KeyListener;
//import java.util.concurrent.CountDownLatch;
//import java.util.concurrent.atomic.AtomicInteger;
//
//public class View extends JPanel {
//    private final Model model;
//    private GameListener listener;
//    Figure figure;
//    MyField field;
//    DefaultTableModel tableModel;
//    final int sizeCell = 30;
//    JFrame frame;
//    TetrisPanel panel;
//    private JLabel scoreLabel;
//    JPanel sidePanel;
//    void initButtons() {
//
//    }
//
//    public void startWindow() {
//
//
//    }
//
//    public void setListener(GameListener listener_) {
//        listener = listener_;
//    }
//
//    public void initView() {
//        System.out.println("захожу сюда");
//
//        panel = new TetrisPanel();
//        int fieldWidth = field.getWeight() * sizeCell;
//        int fieldHeight = field.getHeight() * sizeCell;
//
//        // Устанавливаем предпочтительный размер панели тетриса
//        panel.setPreferredSize(new Dimension(fieldWidth, fieldHeight));
//
//        // Создаём боковую панель для счёта
//        sidePanel = new JPanel();
//        sidePanel.setPreferredSize(new Dimension(200, fieldHeight));
//        //sidePanel.setLayout(new BoxLayout(sidePanel, BoxLayout.Y_AXIS));
//
//        scoreLabel = new JLabel("Score: 0");
//        scoreLabel.setFont(new Font("Arial", Font.BOLD, 20));
//        scoreLabel.setForeground(Color.BLACK);
//        scoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
//        sidePanel.add(scoreLabel);
//
//        // Используем BoxLayout по оси X
//        frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.X_AXIS));
//        frame.add(panel);
//        frame.add(sidePanel);
//        sidePanel.add(Box.createVerticalStrut(20));
//
//        String[] columns = {"№", "Scores"};
//
//        String[][] data = {
//                {"1", "0"},
//                {"2", "0"},
//                {"3", "0"},
//                {"4", "0"},
//                {"5", "0"}
//        };
//        tableModel = new DefaultTableModel(data, columns);
//        JTable table = new JTable(tableModel);
//        //table.setEnabled(false); // таблицу нельзя редактировать
//        table.setRowHeight(25);  // высота строк
//        JScrollPane tableScroll = new JScrollPane(table);
//        tableScroll.setPreferredSize(new Dimension(180, 150)); // размеры под панель
//
//        sidePanel.add(tableScroll);
//
//
//        frame.pack();
//        frame.setResizable(false);
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.setVisible(true);
//
//        panel.setFocusable(true);
//        panel.requestFocusInWindow();
//        panel.addKeyListener(new KeysAdapter());
//        frame.revalidate(); // пересчитать layout
//        frame.repaint();
//        frame.setVisible(true);
//    }
//
//    public void deletePlayB() {
//        frame.getContentPane().removeAll();
//    }
//
//    public View(MyField field_, Model model_, GameListener listener_) {
//        model = model_;
//        field = field_;
//        frame = new JFrame("Tetris");
//        listener = listener_;
//        Button play = new Button("Play");
//        play.setBounds(160, 360, 300, 50);
//        play.addActionListener(e -> {
//            if(listener != null) {
//                try {
//                    listener.play();
//                }
//                catch (Exception ex) {
//                    System.out.println(ex.getLocalizedMessage());
//                }
//            }
//        });
//        frame.getContentPane().add(play);
//        frame.pack();
//        frame.setVisible(true);
//    }
//
//    public void updateTable(String[] values) {
//        for(int i = 0; i < 5; i++) {
//            tableModel.setValueAt(values[i], i, 1);
//        }
//    }
//
//    public void updateScore(int value) {
//        scoreLabel.setText("Score: " + value);
//    }
//
//    public void showWindow() {
//    }
//
//    // консоль
//    public void printField(MyField fieldNew) {
//        for (int i = 0; i < fieldNew.getHeight(); i++) {
//            for (int j = 0; j < fieldNew.getWeight(); j++) {
//                Cell cell = fieldNew.getCell(i * fieldNew.getWeight() + j);
//                if (cell.getStatus() == Cell.cells.filled) {
//                    System.out.print("#");
//                } else {
//                    System.out.print(".");
//                }
//            }
//            System.out.print('\n');
//        }
//        System.out.println("----------------");
//
//    }
//
//    public void GameOver() {
//        frame.getContentPane().removeAll();
//        frame.setLayout(null);
//        JLabel label = new JLabel("Game over!");
//        Button replay = new Button("Replay");
//        Button exit = new Button("Exit");
//        exit.setBounds(160, 360, 300, 50);
//        replay.setBounds(160, 300, 300, 50);
//        label.setBounds(275, 230, 300, 70);
//        replay.addActionListener(e -> {
//            if(listener != null) {
//                try {
//                    listener.replay();
//                    frame.getContentPane().removeAll();
//                    frame.add(panel);
//                    frame.add(sidePanel);
//                    panel.setFocusable(true);
//                    panel.requestFocusInWindow();
//                    frame.revalidate();
//                    frame.repaint();
//                }
//                catch (Exception ex) {
//                    System.out.println(ex.getLocalizedMessage());
//                }
//            }
//        });
//
//        exit.addActionListener(e -> {
//            System.out.println("exit");
//            if(listener != null) {
//                listener.exit();
//            }
//        });
//        frame.add(label);
//        frame.add(replay);
//        frame.add(exit);
//
//        frame.revalidate();
//        frame.repaint();
//
//    }
//
//
//    public void printFieldGUI(MyField field, Figure figure) {
//        panel.updateData(field, figure);
//        panel.repaint();
//    }
//
//    public void printGame(Figure figure_) {
//        field = model.getField();
//        figure = figure_;
//        MyField fieldCopy = new MyField();
//        fieldCopy.copy(field);
//        model.mergeFigureToField(figure_, fieldCopy);
//        printField(fieldCopy);
//        printFieldGUI(fieldCopy, figure);
//
//    }
//
//
//    class KeysAdapter implements KeyListener {
//
//        @Override
//        public void keyTyped(KeyEvent e) {
//
//        }
//
//        @Override
//        public void keyPressed(KeyEvent e) {
//            switch (e.getKeyCode()) {
//                case KeyEvent.VK_LEFT :
//                    Model.left(figure, field);
//                    break;
//                case KeyEvent.VK_RIGHT:
//                    Model.right(figure, field);
//                    break;
//                case KeyEvent.VK_DOWN:
//                    Model.down(figure, field);
//                    break;
//                case KeyEvent.VK_UP:
//                    Model.rotate(figure, field);
//            }
//            printGame(figure);
//        }
//
//        @Override
//        public void keyReleased(KeyEvent e) {
//
//        }
//    }
//}
//
//